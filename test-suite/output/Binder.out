foo = fun '(x, y) => x + y
     : nat * nat -> nat
forall '(a, b), a /\ b
     : Prop
foo = Î» '(x, y), x + y
     : nat * nat â†’ nat
âˆ€ '(a, b), a âˆ§ b
     : Prop
let f '(x, y) (z t : nat) := x + y + z + t in f
     : nat * nat -> nat -> nat -> nat
let f (b : bool) '(x, y) (z : nat) := if b then x + y else z in f
     : bool -> nat * nat -> nat -> nat
